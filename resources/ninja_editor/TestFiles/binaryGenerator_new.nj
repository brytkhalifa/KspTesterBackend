void main(){
   local CharList charArrayList0;
   local CharList charArrayList1;
   local CharList charArrayList2;
   local CharList charArrayList3;
   local CharList charArrayList4;
   local Integer a;
   local Integer b;
	 local Integer c;
	 local Integer d;
	 local Integer e;

  // read a, b, c, d and e 
	 a = readInteger();
	 b = readInteger();
	 c = readInteger();
	 d = readInteger();
	 e = readInteger();

	writeCharacter('\n');
	writeString("_BINARY_GENERATOR_ n := ");
	writeInteger(a);
	writeCharacter('\n');
	writeString("----------------------------\n");
	binGen(a);

	writeString("\n********************************************************\n");

	writeString("_BINARY_GENERATOR_ n := ");
	writeInteger(b);
	writeCharacter('\n');
	writeString("----------------------------\n");
	binGen(b);

	writeString("\n********************************************************\n");

	writeString("_BINARY_GENERATOR_ n := ");
	writeInteger(c);
	writeCharacter('\n');
	writeString("----------------------------\n");
	binGen(c);

	writeString("\n********************************************************\n");

	writeString("_BINARY_GENERATOR_ n := ");
	writeInteger(d);
	writeCharacter('\n');
	writeString("----------------------------\n");
	binGen(d);

	writeString("\n********************************************************\n");

	writeString("_BINARY_GENERATOR_ n := ");
	writeInteger(e);
	writeCharacter('\n');
	writeString("----------------------------\n");
	binGen(e);

}



Integer power(Integer numb,Integer pow){
  local Integer mul;
  mul=numb;
  if(pow==0) return 1;
  while(pow>1){
    numb=numb*mul;
    pow=pow-1;
  }
  return numb;
}


// INTEGER_ARRAY_LIST

type IntList=record{
  Integer[] array;
  Integer capacity;
  Integer in;
};


IntList newIntList(){
	local IntList intList;
	intList=new(IntList);
	intList.in=0;
	intList.array= new (Integer[1000]);
	intList.capacity=1000;
	return intList;
}

void add(IntList list,Integer x){
 local Integer i;
 i=list.in;
 if(i==list.capacity){
   list=increaseSize(list);
 }
 list.array[i]=x;
 list.in=list.in+1;
}

Integer get(IntList list, Integer index){
  if(index==list.capacity){
    return -1;
  }
  if(index<0){
    return -1;
  }
  if(isEmpty(list)){
    return -1;
  }
  return list.array[index];
}

Integer getSize(IntList list){
    return list.in;
}


Boolean remove(IntList list,Integer index){
  local Integer i;
  local Integer j;
  if(index==list.capacity){
    return false;
  }
  if(index<0){ return false;}

  i=index;
  while(i<list.capacity){
    j=i+1;
    list.array[i]=list.array[j];
    i=i+1;
  }
  list.in=list.in-1;

  return true;
}


IntList increaseSize(IntList list){
  local Integer[] newArray;
  local Integer newSize;
  local Integer i;
  newSize=list.capacity*list.capacity;
  newArray= new(Integer[newSize]);
  list.array=newArray;
  list.capacity=newSize;
  return list;
}

Boolean isEmpty(IntList list){
  if(list.in==0) return true;
  return false;
}


void iClear(IntList list){
    list=newIntList();
}

// STRING_MAKER  CLASS

type StringMaker= record{
  CharList[] buffer;
  Integer capacity;
  Integer in;
};

// Constructor

StringMaker newStringMaker(){
 local StringMaker stringMaker;
 stringMaker=new(StringMaker);
 stringMaker.in=0;
 stringMaker.buffer=new(CharList[1000]);
 stringMaker.capacity=1000;
 return stringMaker;
}

// get Methode

CharList sGet(StringMaker list, Integer index){
  if(index==list.capacity){
    return newCharList();
  }
  if(index<0){
    return newCharList();
  }
  if(sIsEmpty(list)){
    return newCharList();
  }
  return list.buffer[index];
}

// Add Methode

void sAdd(StringMaker list,CharList charList){
 local CharList charL;
 local Integer i;
 charL=newCharList();
 i=list.in;
 charL.array=charList.array;
 charL.in=charList.in;
 if(i==list.capacity){
   list=sIncreaseSize(list);
 }
 list.buffer[i]=charL;
 list.in=list.in+1;
}


// size Methode

Integer sGetSize(StringMaker list){
    return list.in;
}



// remove Methode

Boolean sRemove(StringMaker list,Integer index){
  local Integer i;
  local Integer j;
  if(index==list.capacity){
    return false;
  }
  if(index<0){ return false;}

  i=index;
  while(i<list.capacity){
    j=i+1;
    list.buffer[i]=list.buffer[j];
    i=i+1;
  }
  list.in=list.in-1;

  return true;
}

//increase Methode

StringMaker sIncreaseSize(StringMaker list){
  local CharList[] newBuffer;
  local Integer newSize;
  local Integer i;
  newSize=list.capacity*list.capacity;
  newBuffer=new(CharList[newSize]);
  list.buffer=newBuffer;
  list.capacity=newSize;
  return list;
}

//isEmpty Methode

Boolean sIsEmpty(StringMaker list){
  if(list.in==0) return true;
  return false;
}

void sClear(StringMaker list){
    list=newStringMaker();
}

// CHARACTER_ARRAY_LIST

type CharList=record{
 Character[] array;
 Integer capacity;
 Integer in;
};


CharList newCharList(){
 local CharList charList;
 charList=new(CharList);
 charList.in=0;
 charList.array= new (Character[1000]);
 charList.capacity=1000;
 return charList;
}

void cAdd(CharList list,Character c){
 local Integer i;
 i=list.in;
 if(i==list.capacity){
   list=cIncreaseSize(list);
 }
 list.array[i]=c;
 list.in=list.in+1;
}

Character cGet(CharList list, Integer index){
  if(index==list.capacity){
    return '$';
  }
  if(index<0){
    return '$';
  }
  if(cIsEmpty(list)){
    return '$';
  }
  return list.array[index];
}


Integer cGetSize(CharList list){
    return list.in;
}

void cPrint(CharList list) {
  local Integer i;
	i = 0;
	while( i < list.in) {
		writeCharacter(list.array[i]);
		i = i + 1 ;
	}
 }

Boolean cRemove(CharList list,Integer index){
  local Integer i;
  local Integer j;
  if(index > list.in){
    return false;
  }
  if(index<0){ return false;}

  i = 0;
  while(i < list.in - 1){
    if (i < index) {
			list.array[i]=list.array[i];
		} else {
			list.array[i]=list.array[i + 1];
		}
    i=i+1;
  }
  list.in=list.in-1;

  return true;
}


CharList cIncreaseSize(CharList list){
  local Character[] newArray;
  local Integer newSize;
  local Integer i;
  newSize=list.capacity*list.capacity;
  newArray= new(Character[newSize]);
  list.array=newArray;
  list.capacity=newSize;
  return list;
}

Boolean cIsEmpty(CharList list){
  if(list.in==0) return true;
  return false;
}

CharList cClear(CharList list){
    list.in=0;
    return list;
}


// _BINARY_GENERATOR

void binGen(Integer n) {
	local CharList bin;
	bin = newCharList();
	binGenRec(n, bin);
}

void binGenRec(Integer n, CharList bin) {
	if (n == 0) {
		cPrint(bin);
		writeCharacter('\n');
	}
	else {
		cAdd(bin, '0');
		binGenRec(n - 1, bin);
		cRemove(bin, bin.in - 1 );
		cAdd(bin, '1');
		binGenRec(n - 1, bin);
		cRemove(bin, bin.in - 1 );
	}
}

